use std::str::FromStr;
use crate::parser::{LalrpopError, ast::{Node, InfixOp}};

grammar<'err>(errors: &'err mut Vec<LalrpopError<'input>>);

pub Expr: Node = {
    <lhs:AtomicExpr> <op:InfixOp> <rhs:ErrNoExplicitGrouping> => Node::Expr {
        lhs: Box::new(lhs), op, rhs: Box::new(rhs) 
    },
    AtomicExpr
};


pub ErrNoExplicitGrouping: Node = {
    // TODO: detailed error message
    <lhs:AtomicExpr> <op:InfixOp> <rhs:Expr> => Node::Repaired(Box::new(Node::Expr {
        lhs: Box::new(lhs), op, rhs:Box::new(rhs),
    })),
    AtomicExpr,
};

pub AtomicExpr: Node = {
    <n:Number> => n,
    <i:Ident> => i,
    "(" <e:Expr> ")" => e,
    ! => { errors.push(<>); Node::Error },
};

pub InfixOp: InfixOp = {
    "+" => InfixOp::Add,
    "-" => InfixOp::Sub,
    "*" => InfixOp::Mul,
    "/" => InfixOp::Div,
}

pub Number: Node = <s:r"[0-9]+"> => Node::Number(i32::from_str(s).unwrap());
pub Ident: Node = <s:r"[a-zA-Z_][a-zA-Z_0-9]*"> => Node::Ident(s.to_string());
