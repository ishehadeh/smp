use std::str::FromStr;
use crate::parser::{ParseError, ast::{Node, InfixOp}};
use lalrpop_util::ErrorRecovery;


grammar<'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, ParseError>>);

extern {
    // Set the error type for the parse result.
    // NOTE: this is only for fatal errors,
    //       recovered errors are passed back through a parameter to the grammar. 
    type Error = ParseError;
}

pub Expr: Node = {
    <lhs:AtomicExpr> <op:InfixOp> <rhs:ErrNoExplicitExprGrouping> => Node::Expr {
        lhs: Box::new(lhs), op, rhs: Box::new(rhs) 
    },
    AtomicExpr
};


pub ErrNoExplicitExprGrouping: Node = {
    // TODO: detailed error message
    <lhs:AtomicExpr> <op:InfixOp> <rhs:Expr> => {
        Node::Repaired(Box::new(Node::Expr {
            lhs: Box::new(lhs), op, rhs:Box::new(rhs),
        }))
    },
    AtomicExpr,
};

pub AtomicExpr: Node = {
    <n:Number> => n,
    <i:Ident> => i,
    "(" <e:Expr> ")" => e,

    // error recovery handler
    // ref: https://github.com/tweag/nickel/blob/f7ffe31697d639ba7d10bcb757a3a8ba73f011a7/core/src/parser/grammar.lalrpop#L431C21-L431C43
    <l: @L> <e: !> <r: @R> => { errors.push(e.clone()); Node::Error },
};

pub InfixOp: InfixOp = {
    "+" => InfixOp::Add,
    "-" => InfixOp::Sub,
    "*" => InfixOp::Mul,
    "/" => InfixOp::Div,
}

pub Number: Node = <s:r"[0-9]+"> => Node::Number(i32::from_str(s).unwrap());
pub Ident: Node = <s:r"[a-zA-Z_][a-zA-Z_0-9]*"> => Node::Ident(s.to_string());
