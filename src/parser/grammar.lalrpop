use crate::parser::{ParseError, ast::{Ast, Param, AnonType, StructMember, InfixOp, self}};
use lalrpop_util::ErrorRecovery;
use crate::parser::lexer::Token;

grammar<'input, 'err>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, ParseError>>);

extern {
    // Set the error type for the parse result.
    // NOTE: this is only for fatal errors,
    //       recovered errors are passed back through a parameter to the grammar. 
    type Error = ParseError;
    type Location = usize;

    enum Token<'input> {
        "let" => Token::KeywordLet,
        "func" => Token::KeywordFunc,
        "to" => Token::KeywordTo,
        "int" => Token::KeywordInt,
        "bool" => Token::KeywordBool,
        "false" => Token::KeywordFalse,
        "true" => Token::KeywordTrue,
        "mut" => Token::KeywordMut,
        "type" => Token::KeywordType,
        "if" => Token::KeywordIf,
        "else" => Token::KeywordElse,
 
        "ident" => Token::Identifier(<&'input str>),
        "literal-int" => Token::LiteralInteger(<&'input str>),

        "(" => Token::ParenLeft,
        ")" => Token::ParenRight,
        "{" => Token::BraceCurlyLeft,
        "}" => Token::BraceCurlyRight,
        ";" => Token::Semicolon,
        ":" => Token::Colon,
        "," => Token::Comma,
        "+" => Token::OperatorAdd,
        "-" => Token::OperatorSub,
        "*" => Token::OperatorMul,
        "/" => Token::OperatorDiv,
        "=" => Token::OperatorAssign,
        "==" => Token::OperatorCmpEqual,
        "!=" => Token::OperatorCmpNotEqual,

        " " => Token::Whitespace(<&'input str>),
    }
}

pub TypeReference: AnonType = {
    <name: "ident"> => AnonType::TypeReference {
        name: name.to_string(),
        parameters: (),
    }
};

/// One ore more items that are separated by a comma.
/// Source: https://github.com/RustPython/Parser/blob/9ce55aefdeb35e2f706ce0b02d5a2dfe6295fc57/parser/src/python.lalrpop#L1659
OneOrMore<T>: Vec<T> = {
    <e:T> => vec![e],
    // This causes issues if I add whitespace around ","
    <mut v: OneOrMore<T>> "," <e:T> => {
        v.push(e);
        v
    }
};


pub Param: Param = {
    <name:"ident"> " "? ":" " "? <typ:AnonType> => Param {
        name: name.to_string(),
        typ,
    }
};

pub DefParams: Vec<Param> = {
    "(" " "? ")" => vec![],
    "(" " "?<params: OneOrMore<Param>> " "? ")" => params
};

pub DefFunction: ast::DefFunction = {
    <l: @L> "func" " " <name:"ident"> <params:DefParams> " "? ":" " "? <typ:AnonType> " "? <block: Block> <r: @R> => {
        ast::DefFunction {
            span: (l, r).into(),
            name: name.to_string(),
            params,
            return_type: typ,
            body: Box::new(Ast::Block(block))
        }
    }
};

pub DefStructMember: StructMember = {
    "mut" " " <name:"ident"> " "? ":" " "? <typ:AnonType> => {
        StructMember {
            name: name.to_string(),
            typ,
            mutable: true,
        }
    },

    <name:"ident"> ":" <typ:AnonType> => {
        StructMember {
            name: name.to_string(),
            typ,
            mutable: false,
        }
    },
}

pub TypeIntegerRange: AnonType = {
    "int" " " <lo:"literal-int"> " " "to" " " <hi:"literal-int"> => AnonType::IntegerRange {
        inclusive_low: lo.to_string(),
        inclusive_high: hi.to_string(),
    },
}

pub TypeBoolean: AnonType = {
    "bool" => AnonType::Bool
}

pub StructBody: AnonType = {
    "{" " "? "}" => AnonType::StructBody { members: vec![] },
    "{" " "? <members: OneOrMore<DefStructMember>> " "? "}" => {
        AnonType::StructBody {
            members
        }
    }
}

pub AnonType: AnonType = {
    StructBody,
    TypeIntegerRange,
    TypeReference,
    TypeBoolean,
}

pub DefType: ast::DefType = {
    <l: @L>"type" " " <name:"ident"> " "? "=" " "? <typ:AnonType> " "? ";"  <r: @R> => {
        ast::DefType {
            span: (l, r).into(),
            name: name.to_string(),
            typ,
        }
    }
}

pub StmtIf: ast::StmtIf = {
    <l: @L> "if" " " <condition:Expr> <body:Block> <r: @R> => ast::StmtIf {
        span: (l, r).into(),
        condition: Box::new(condition),
        body: Box::new(Ast::Block(body)),
        else_: None,
    },

    <l: @L> "if" " " <condition:Expr> <body:Block> "else" " "? <else_:Block> <r: @R> => ast::StmtIf {
        span: (l, r).into(),
        condition: Box::new(condition),
        body: Box::new(Ast::Block(body)),
        else_: Some(Box::new(Ast::Block(else_))),
    }
}

pub ExprCall: ast::ExprCall = {
    // FIXME: how to allow whitespace between fname and ( without adding ambiguity
    <l: @L> <fname:"ident"> "(" " "? ")" <r: @R> => ast::ExprCall {
        span: (l, r).into(),
        function_name: fname.to_string(),
        paramaters: vec![]
    },

    <l: @L> <fname:"ident"> "(" " "? <paramaters:OneOrMore<Expr>> ")" <r: @R> => ast::ExprCall {
        span: (l, r).into(),
        function_name: fname.to_string(),
        paramaters,
    }
}

pub Expr: Ast = {
    // notice only trailing whitespace is used to reduce ambiguities
    <l: @L> <lhs:AtomicExpr> <op:InfixOp> " "? <rhs:ErrNoExplicitExprGrouping> <r: @R>  => Ast::Expr(ast::Expr {
        span: (l, r).into(),
        lhs: Box::new(lhs),
        op,
        rhs: Box::new(rhs) 
    }),
    AtomicExpr
};


pub StmtLet: ast::StmtLet = {
    <l: @L> "let" " " <name:"ident"> " "? ":" " "? <typ:AnonType> " "? "=" " "? <value:Expr> <r: @R> => ast::StmtLet {
        span: (l, r).into(),
        name: name.to_string(),
        value_type: typ,
        value: Box::new(value),
    }
}

pub Stmt: Ast = {
    <a:StmtLet> => Ast::StmtLet(a),
    <a:StmtIf> => Ast::StmtIf(a),
    <a:Expr> => a,
}

pub StmtList: Vec<Ast> = {
    <e:Stmt> => vec![e],
    <mut v: StmtList> ";" " "? <e:Stmt> => {
        v.push(e);
        v
    }
}

pub Block: ast::Block = {
    <l: @L> "{" " "? "}" <r: @R> " "? => ast::Block { span: (l, r).into(), returns: false, statements: vec![]  },
    <l: @L> "{" " "? <statements: StmtList> "}" <r: @R> " "? => ast::Block { span: (l, r).into(), returns: true, statements },
    <l: @L> "{" " "? <statements: StmtList>  ";" " "? "}"  <r: @R> " "? => ast::Block { span: (l, r).into(), returns: false, statements },
}

pub ErrNoExplicitExprGrouping: Ast = {
    <l: @L> <lhs:AtomicExpr> <op:InfixOp> " "? <rhs:Expr> <r: @R>  => {
        // TODO push error
        Ast::Repaired(
            Some(Box::new(
                Ast::Expr(
                    ast::Expr {
                        span: (l, r).into(),
                        lhs: Box::new(lhs),
                        op,
                        rhs:Box::new(rhs),
                    }
                )
            ))
        )
    },
    AtomicExpr,
};

pub AtomicExpr: Ast = {
    <n:LiteralInteger> " "? => Ast::LiteralInteger(n),
    <n:LiteralBool> " "? => Ast::LiteralBool(n),
    <i:Ident> " "? => Ast::Ident(i),
    <c:ExprCall> " "? => Ast::ExprCall(c),
    <b:Block> => Ast::Block(b),
    "(" <e:Expr> ")" " "? => e,

    // error recovery handler
    // ref: https://github.com/tweag/nickel/blob/f7ffe31697d639ba7d10bcb757a3a8ba73f011a7/core/src/parser/grammar.lalrpop#L431C21-L431C43
    <l: @L> <e: !> <r: @R> => { errors.push(e.clone()); Ast::Repaired(None) },
};

pub InfixOp: InfixOp = {
    "+" => InfixOp::Add,
    "-" => InfixOp::Sub,
    "*" => InfixOp::Mul,
    "/" => InfixOp::Div,
    "!=" => InfixOp::CmpNotEqual,
    "==" => InfixOp::CmpEqual,
}

pub LiteralInteger: ast::LiteralInteger = {
    <l: @L> <s:"literal-int"> <r: @R> => ast::LiteralInteger {
        span: (l, r).into(),
        value: s.parse::<i32>().unwrap()
    }
}

pub LiteralBool: ast::LiteralBool = {
    <l: @L> "true" <r: @R> => ast::LiteralBool {
        span: (l, r).into(),
        value: true
    },
    <l: @L> "false" <r: @R> => ast::LiteralBool {
        span: (l, r).into(),
        value: false
    }
}

pub Ident: ast::Ident = {
    <l: @L> <s:"ident"> <r: @R> => ast::Ident {
        span: (l, r).into(),
        symbol: s.to_string()
    }
}

TopLevel: Ast = {
    <a:DefFunction> => Ast::DefFunction(a),
    <a:DefType> " "? => Ast::DefType(a)
};

TopLevelList: Vec<Ast> = {
    <e:TopLevel> => vec![e],
    <mut v: TopLevelList> <e:TopLevel> => {
        v.push(e);
        v
    }
}


pub Program: Ast = {
    <l: @L> " "? <definitions:TopLevelList> <r: @R> => {
        Ast::Program(ast::Program {
            span: (l, r).into(),
            definitions,
        })
    }
};
